//code
package com.app.javastream;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class intermediateoperations {

	public static void main(String[] args) {
		// list of list of strings
		List<List<String>> list = Arrays.asList(Arrays.asList("Reflection", "Collection", "Stream"),
				Arrays.asList("Structure", "state", "Flow"),
				Arrays.asList("Sorting", "Mapping", "Reduction", "Stream"));

		// create a set to hold intermediate results
		Set<String> intermediateresults = new HashSet<>();

		// Stream pipeline demonstrating various intermediate operations
		List<String> result = list.stream().flatMap(List::stream) // Flatten the list of lists into a single stream
				.filter(s -> s.startsWith("S")) // Filter elements starting with "S"
				.map(String::toUpperCase) // Transform each element to uppercase
				.distinct() // Remove duplicate elements
				.sorted() // Sort elements
				.peek(s -> intermediateresults.add(s)) // Perform an action (add to set) on each element
				.collect(Collectors.toList()); // Collect the final result into a list
		// print intermediate results
		System.out.println("Intermediate results:");
		intermediateresults.forEach(System.out::println);

		// print final result
		System.out.println("Final results:");
		result.forEach(System.out::println);
  }
}

Output:
Intermediate results:
STRUCTURE
STREAM
SORTING
Final results:
SORTING
STREAM
STRUCTURE

